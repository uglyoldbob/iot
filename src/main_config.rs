//! Contains code related to the main configuration of the application

use der::Decode;
use egui_multiwin::egui;

use crate::ca::{ComplexName, HttpsCertificate, ProxyConfig};

#[cfg(target_os = "linux")]
/// Returns the default config file.
pub fn default_config_path() -> std::path::PathBuf {
    std::path::PathBuf::from("/etc/rust-iot/")
}

#[cfg(target_os = "windows")]
/// Returns the default config file.
pub fn default_config_path() -> std::path::PathBuf {
    std::path::PathBuf::from("./")
}

/// The main configuration for the application
#[derive(
    Clone,
    Debug,
    userprompt::Prompting,
    userprompt::EguiPrompting,
    serde::Deserialize,
    serde::Serialize,
)]
pub struct GeneralSettings {
    /// The name of the cookie to use.
    pub cookie: String,
    /// The path to get to the static content of the site
    pub static_content: String,
}

impl Default for GeneralSettings {
    fn default() -> Self {
        Self::new()
    }
}

impl GeneralSettings {
    /// Construct a blank Self
    fn new() -> Self {
        Self {
            cookie: "".into(),
            static_content: "./content".into(),
        }
    }
}

/// The admin configuration for the application
#[derive(
    Clone,
    Debug,
    Default,
    userprompt::Prompting,
    userprompt::EguiPrompting,
    serde::Deserialize,
    serde::Serialize,
)]
pub struct AdminSettings {
    /// The password for the administrator
    pub pass: userprompt::Password2,
    /// The n parameter for expanding passwords
    pub n: u8,
    /// The r parameter for expanding passwords
    pub r: u32,
    /// The p parameter for expanding passwords
    pub p: u32,
}

impl AdminSettings {
    /// Construct a blank Self
    fn new() -> Self {
        Self {
            pass: userprompt::Password2::new("".into()),
            n: 1,
            r: 1,
            p: 1,
        }
    }
}

/// The http configuration for the application
#[derive(
    Clone,
    Debug,
    Default,
    userprompt::Prompting,
    userprompt::EguiPrompting,
    serde::Deserialize,
    serde::Serialize,
)]
pub struct HttpSettings {
    /// The port number to listen on
    pub port: u16,
}

impl HttpSettings {
    /// Construct a blank Self
    fn new() -> Self {
        Self { port: 3 }
    }
}

/// The location of a https certificate. If it is specified as `New`, it will be created by a specified ca.
#[derive(
    Clone,
    Debug,
    userprompt::Prompting,
    userprompt::EguiPrompting,
    serde::Deserialize,
    serde::Serialize,
)]
pub enum HttpsCertificateLocationAnswers {
    /// The certificate should be contained in the hsm
    HsmGenerated,
    /// The path for an existing certificate that should be loaded
    Existing {
        /// The path for the existing certificate
        path: userprompt::FileOpen,
        /// The password for the existing certificate
        password: userprompt::Password2,
    },
    /// The certificate is generated by the ca creation process, and should be deleted in destruction
    New {
        /// The path where the new certificate should be put
        path: userprompt::FileCreate,
        /// The name of the ca entity that should create the certificate
        ca_name: String,
    },
}

/// The location of a https certificate. If it is specified as `New`, it will be created by a specified ca.
#[derive(Clone, Debug, serde::Deserialize, serde::Serialize)]
pub enum HttpsCertificateLocation {
    /// The certificate should be contained in the hsm
    HsmGenerated,
    /// The path for an existing certificate that should be loaded
    Existing {
        /// The path for the existing certificate
        path: std::path::PathBuf,
        /// The password for the existing certificate
        password: String,
    },
    /// The certificate is generated by the ca creation process, and should be deleted in destruction
    New {
        /// The path where the new certificate should be put
        path: std::path::PathBuf,
        /// The name of the ca entity that should create the certificate
        ca_name: String,
        /// The password for the certificate
        password: String,
    },
}

impl From<HttpsCertificateLocationAnswers> for HttpsCertificateLocation {
    fn from(value: HttpsCertificateLocationAnswers) -> Self {
        match value {
            HttpsCertificateLocationAnswers::HsmGenerated => HttpsCertificateLocation::HsmGenerated,
            HttpsCertificateLocationAnswers::Existing { path, password } => Self::Existing {
                path: path.to_path_buf(),
                password: password.to_string(),
            },
            // Generate a random 32 digit password for the certificate
            HttpsCertificateLocationAnswers::New { path, ca_name } => Self::New {
                path: path.to_path_buf(),
                ca_name,
                password: crate::utility::generate_password(32),
            },
        }
    }
}

impl HttpsCertificateLocation {
    /// Get a usable reference to use the https certificate
    pub fn get_usable(&self) -> HttpsCertificate {
        let process_pkcs12 = |pkcs12: Vec<u8>, password: &str| {
            let pkcs12 =
                cert_common::pkcs12::Pkcs12::load_from_data(&pkcs12, password.as_bytes(), 0);
            let cert_der = pkcs12.cert;

            let x509_cert = x509_cert::Certificate::from_der(&cert_der).unwrap();

            HttpsCertificate {
                algorithm: x509_cert.signature_algorithm.try_into().unwrap(),
                cert: cert_der,
                keypair: Some(crate::ca::Keypair::NotHsm(pkcs12.pkey.clone())),
                attributes: Vec::new(),
            }
        };

        match self {
            HttpsCertificateLocation::HsmGenerated => {
                todo!()
            }
            HttpsCertificateLocation::Existing { path, password } => {
                use std::io::Read;
                let mut certbytes = vec![];
                let mut certf = std::fs::File::open(path).unwrap();
                service::log::info!("Loading https certificate from {}", path.display());
                certf.read_to_end(&mut certbytes).unwrap();
                process_pkcs12(certbytes, password)
            }
            HttpsCertificateLocation::New {
                path,
                ca_name: _,
                password,
            } => {
                use std::io::Read;
                let mut certbytes = vec![];
                service::log::info!(
                    "Loading generated https certificate from {}",
                    path.display()
                );
                let mut certf = std::fs::File::open(path).unwrap();
                certf.read_to_end(&mut certbytes).unwrap();
                process_pkcs12(certbytes, password)
            }
        }
    }

    /// Construct a temporary file for being able to remove relative file paths
    pub async fn make_dummy(&self) {
        if let HttpsCertificateLocation::New {
            path,
            ca_name: _,
            password: _,
        } = self
        {
            use tokio::io::AsyncWriteExt;
            let pb = (*path).to_owned();
            let mut f = tokio::fs::File::create(&pb).await.unwrap();
            f.write_all(" ".as_bytes())
                .await
                .expect("Failed to write dummy https certificate");
        }
    }

    /// Destroy the certificate by deleting the file if it was created by the construction process
    pub fn destroy(&self) {
        if let HttpsCertificateLocation::New {
            path,
            ca_name: _,
            password: _,
        } = self
        {
            let b = (*path).to_owned();
            std::fs::remove_file(b).unwrap();
        }
    }

    /// Retrieve the password for the certificate
    pub fn password(&self) -> Option<&str> {
        match self {
            HttpsCertificateLocation::HsmGenerated => None,
            HttpsCertificateLocation::Existing { path: _, password } => Some(password.as_str()),
            HttpsCertificateLocation::New {
                path: _,
                ca_name: _,
                password,
            } => Some(password.as_str()),
        }
    }
}

impl Default for HttpsCertificateLocationAnswers {
    fn default() -> Self {
        Self::Existing {
            path: Default::default(),
            password: Default::default(),
        }
    }
}

impl Default for HttpsCertificateLocation {
    fn default() -> Self {
        Self::Existing {
            path: std::path::PathBuf::default(),
            password: String::default(),
        }
    }
}

impl HttpsCertificateLocation {
    /// Retrieves the path for the certificate, not checking to see if the file actually exists
    fn path(self) -> Option<std::path::PathBuf> {
        match self {
            HttpsCertificateLocation::HsmGenerated => None,
            HttpsCertificateLocation::Existing { path, password: _ } => Some(path),
            HttpsCertificateLocation::New {
                path,
                ca_name: _,
                password: _,
            } => Some(path),
        }
    }

    /// Returns true if the certificate exists
    pub fn exists(&self) -> bool {
        match self {
            HttpsCertificateLocation::HsmGenerated => false,
            HttpsCertificateLocation::Existing { path, password: _ } => path.exists(),
            HttpsCertificateLocation::New {
                path,
                ca_name: _,
                password: _,
            } => path.exists(),
        }
    }

    /// Returns Some if the certificate should be create by a ca as a file
    pub fn create_by_ca(&self) -> Option<String> {
        if let HttpsCertificateLocation::New {
            path: _,
            ca_name,
            password: _,
        } = self
        {
            Some(ca_name.clone())
        } else {
            None
        }
    }

    /// Get the location for the file
    pub fn pathbuf(&self) -> Option<std::path::PathBuf> {
        match self {
            HttpsCertificateLocation::HsmGenerated => None,
            HttpsCertificateLocation::Existing { path, password: _ } => Some(path.to_path_buf()),
            HttpsCertificateLocation::New {
                path,
                ca_name: _,
                password: _,
            } => Some(path.to_path_buf()),
        }
    }
}

/// The https configuration for the application
#[derive(
    Clone,
    Debug,
    Default,
    userprompt::Prompting,
    userprompt::EguiPrompting,
    serde::Deserialize,
    serde::Serialize,
)]
pub struct HttpsSettingsAnswers {
    /// The path to the p12 certificate to use for the https server certificate
    pub certificate: HttpsCertificateLocationAnswers,
    /// The port number to listen on
    pub port: u16,
    /// True when a user certificate should be required to access the system
    pub require_certificate: bool,
}

impl HttpsSettingsAnswers {
    /// Construct a blank Self
    fn new() -> Self {
        Self {
            certificate: HttpsCertificateLocationAnswers::default(),
            port: 4,
            require_certificate: false,
        }
    }
}

impl From<HttpsSettingsAnswers> for HttpsSettings {
    fn from(value: HttpsSettingsAnswers) -> Self {
        Self {
            certificate: value.certificate.into(),
            port: value.port,
            require_certificate: value.require_certificate,
        }
    }
}

/// The https configuration for the application
#[derive(Clone, Debug, Default, serde::Deserialize, serde::Serialize)]
pub struct HttpsSettings {
    /// The path to the p12 certificate to use for the https server certificate
    pub certificate: HttpsCertificateLocation,
    /// The port number to listen on
    pub port: u16,
    /// True when a user certificate should be required to access the system
    pub require_certificate: bool,
}

impl HttpsSettings {
    /// Construct a blank Self
    fn new() -> Self {
        Self {
            certificate: HttpsCertificateLocation::default(),
            port: 4,
            require_certificate: false,
        }
    }
}

/// The database configuration for the application
#[derive(
    Clone,
    Debug,
    userprompt::Prompting,
    userprompt::EguiPrompting,
    serde::Deserialize,
    serde::Serialize,
)]
pub struct DatabaseSettings {
    /// The username
    pub username: String,
    /// The password
    pub password: userprompt::Password2,
    /// The name of the database
    pub name: String,
    /// The url for the database
    pub url: String,
}

impl Default for DatabaseSettings {
    fn default() -> Self {
        Self::new()
    }
}

impl DatabaseSettings {
    /// Construct a blank Self
    fn new() -> Self {
        Self {
            username: "dummy".into(),
            password: userprompt::Password2::new("dummy".into()),
            name: "dummy".into(),
            url: "dummy".into(),
        }
    }
}

/// The main configuration of the application
#[derive(
    Clone,
    Debug,
    Default,
    userprompt::Prompting,
    userprompt::EguiPrompting,
    serde::Deserialize,
    serde::Serialize,
)]
pub struct MainConfigurationAnswers {
    /// The username to run the service as
    pub username: String,
    /// The password for the user
    pub password: Option<userprompt::Password2>,
    /// Is there a path override for the location of the hsm library?
    pub hsm_path_override: Option<userprompt::FileOpen>,
    /// General settings
    pub general: GeneralSettings,
    /// Admin user settings
    pub admin: AdminSettings,
    /// Settings for the http server
    pub http: Option<HttpSettings>,
    /// Settings for the https server
    pub https: Option<HttpsSettingsAnswers>,
    /// Settings for the database
    pub database: DatabaseSettings,
    /// The public name of the service, contains example.com/asdf for the example
    pub public_names: Vec<ComplexName>,
    /// The optional proxy configuration
    pub proxy_config: Option<ProxyConfig>,
    /// Settings for client certificates
    pub client_certs: Option<Vec<userprompt::FileOpen>>,
    /// The settings for a pki
    pub pki: crate::ca::PkiConfigurationEnumAnswers,
    /// The desired minimum debug level
    pub debug_level: service::LogLevel,
    /// Is tpm2 hardware required to setup the pki?
    #[cfg(feature = "tpm2")]
    pub tpm2_required: bool,
}

/// The main configuration of the application
#[derive(Debug, serde::Deserialize, serde::Serialize)]
pub struct MainConfiguration {
    /// General settings
    pub general: GeneralSettings,
    /// Admin user settings
    pub admin: AdminSettings,
    /// Settings for the http server
    pub http: Option<HttpSettings>,
    /// Settings for the https server
    pub https: Option<HttpsSettings>,
    /// Settings for the database
    pub database: DatabaseSettings,
    /// The public name of the service, contains example.com/asdf for the example
    pub public_names: Vec<ComplexName>,
    /// The optional proxy configuration
    pub proxy_config: Option<ProxyConfig>,
    /// Settings for client certificates
    pub client_certs: Option<Vec<std::path::PathBuf>>,
    /// The settings for a pki
    pub pki: crate::ca::PkiConfigurationEnum,
    /// The desired minimum debug level
    pub debug_level: Option<service::LogLevel>,
    /// Is tpm2 hardware required to setup the pki?
    #[cfg(feature = "tpm2")]
    pub tpm2_required: bool,
    /// Is there a path override for the location of the hsm library?
    pub hsm_path_override: Option<userprompt::FileOpen>,
    /// The pin for the hardware security module
    pub hsm_pin: String,
    /// The user pin for the hardware security module
    pub hsm_pin2: String,
}

impl MainConfiguration {
    /// Remove relative paths
    pub async fn remove_relative_paths(&mut self) {
        if let Some(https) = &mut self.https {
            match &mut https.certificate {
                HttpsCertificateLocation::HsmGenerated => {}
                HttpsCertificateLocation::Existing { path, password: _ } => {
                    if path.is_relative() {
                        *path = path.canonicalize().unwrap();
                    }
                }
                HttpsCertificateLocation::New {
                    path,
                    ca_name: _,
                    password: _,
                } => {
                    if path.is_relative() {
                        *path = path.canonicalize().unwrap();
                    }
                }
            }
        }
        self.pki.remove_relative_paths().await;
    }

    /// Fill out this configuration file with answers from the specified answer configuration
    pub fn provide_answers(answers: &MainConfigurationAnswers) -> Self {
        Self {
            general: answers.general.clone(),
            admin: answers.admin.clone(),
            http: answers.http.clone(),
            https: answers.https.clone().map(|a| a.into()),
            database: answers.database.clone(),
            public_names: answers.public_names.clone(),
            proxy_config: answers.proxy_config.clone(),
            client_certs: answers
                .client_certs
                .clone()
                .map(|a| a.iter().map(|b| b.to_path_buf()).collect()),
            pki: answers.pki.clone().into(),
            debug_level: Some(answers.debug_level.clone()),
            tpm2_required: answers.tpm2_required,
            hsm_path_override: answers.hsm_path_override.clone(),
            hsm_pin: crate::utility::generate_password(32),
            hsm_pin2: crate::utility::generate_password(32),
        }
    }

    /// Return the port number for the http server
    pub fn get_http_port(&self) -> Option<u16> {
        self.http.as_ref().map(|a| a.port)
    }

    /// Return the port number for the https server
    pub fn get_https_port(&self) -> Option<u16> {
        self.https.as_ref().map(|a| a.port)
    }
}
